
//! Autogenerated weights for pallet_message_queue
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-24, STEPS: `50`, REPEAT: 200, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `oty-parity`, CPU: `11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/substrate
// benchmark
// pallet
// --dev
// --pallet
// pallet-message-queue
// --extrinsic=
// --steps
// 50
// --repeat
// 200
// --template
// .maintain/frame-weight-template.hbs
// --output
// frame/message-queue/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_message_queue.
pub trait WeightInfo {
	fn ready_ring_knit() -> Weight;
	fn ready_ring_unknit() -> Weight;
	fn service_queue_base() -> Weight;
	fn service_page_base_completion() -> Weight;
	fn service_page_base_no_completion() -> Weight;
	fn service_page_item() -> Weight;
	fn bump_service_head() -> Weight;
	fn reap_page() -> Weight;
	fn execute_overweight() -> Weight;
}

/// Weights for pallet_message_queue using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: MessageQueue ServiceHead (r:1 w:0)
	// Storage: MessageQueue BookStateFor (r:2 w:2)
	fn ready_ring_knit() -> Weight {
		// Minimum execution time: 8_321 nanoseconds.
		Weight::from_ref_time(8_742_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: MessageQueue BookStateFor (r:2 w:2)
	// Storage: MessageQueue ServiceHead (r:1 w:1)
	fn ready_ring_unknit() -> Weight {
		// Minimum execution time: 8_474 nanoseconds.
		Weight::from_ref_time(12_972_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: MessageQueue BookStateFor (r:1 w:1)
	fn service_queue_base() -> Weight {
		// Minimum execution time: 3_532 nanoseconds.
		Weight::from_ref_time(3_786_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: MessageQueue Pages (r:1 w:1)
	fn service_page_base_completion() -> Weight {
		// Minimum execution time: 5_268 nanoseconds.
		Weight::from_ref_time(7_434_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: MessageQueue Pages (r:1 w:1)
	fn service_page_base_no_completion() -> Weight {
		// Minimum execution time: 5_313 nanoseconds.
		Weight::from_ref_time(5_546_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn service_page_item() -> Weight {
		// Minimum execution time: 74_606 nanoseconds.
		Weight::from_ref_time(111_057_000)
	}
	// Storage: MessageQueue ServiceHead (r:1 w:1)
	// Storage: MessageQueue BookStateFor (r:1 w:0)
	fn bump_service_head() -> Weight {
		// Minimum execution time: 5_524 nanoseconds.
		Weight::from_ref_time(6_068_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: MessageQueue BookStateFor (r:1 w:1)
	// Storage: MessageQueue Pages (r:1 w:1)
	fn reap_page() -> Weight {
		// Minimum execution time: 25_297 nanoseconds.
		Weight::from_ref_time(25_854_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: MessageQueue BookStateFor (r:1 w:1)
	// Storage: MessageQueue Pages (r:1 w:1)
	fn execute_overweight() -> Weight {
		// Minimum execution time: 73_758 nanoseconds.
		Weight::from_ref_time(77_262_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: MessageQueue ServiceHead (r:1 w:0)
	// Storage: MessageQueue BookStateFor (r:2 w:2)
	fn ready_ring_knit() -> Weight {
		// Minimum execution time: 8_321 nanoseconds.
		Weight::from_ref_time(8_742_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: MessageQueue BookStateFor (r:2 w:2)
	// Storage: MessageQueue ServiceHead (r:1 w:1)
	fn ready_ring_unknit() -> Weight {
		// Minimum execution time: 8_474 nanoseconds.
		Weight::from_ref_time(12_972_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: MessageQueue BookStateFor (r:1 w:1)
	fn service_queue_base() -> Weight {
		// Minimum execution time: 3_532 nanoseconds.
		Weight::from_ref_time(3_786_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: MessageQueue Pages (r:1 w:1)
	fn service_page_base_completion() -> Weight {
		// Minimum execution time: 5_268 nanoseconds.
		Weight::from_ref_time(7_434_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: MessageQueue Pages (r:1 w:1)
	fn service_page_base_no_completion() -> Weight {
		// Minimum execution time: 5_313 nanoseconds.
		Weight::from_ref_time(5_546_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn service_page_item() -> Weight {
		// Minimum execution time: 74_606 nanoseconds.
		Weight::from_ref_time(111_057_000)
	}
	// Storage: MessageQueue ServiceHead (r:1 w:1)
	// Storage: MessageQueue BookStateFor (r:1 w:0)
	fn bump_service_head() -> Weight {
		// Minimum execution time: 5_524 nanoseconds.
		Weight::from_ref_time(6_068_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: MessageQueue BookStateFor (r:1 w:1)
	// Storage: MessageQueue Pages (r:1 w:1)
	fn reap_page() -> Weight {
		// Minimum execution time: 25_297 nanoseconds.
		Weight::from_ref_time(25_854_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: MessageQueue BookStateFor (r:1 w:1)
	// Storage: MessageQueue Pages (r:1 w:1)
	fn execute_overweight() -> Weight {
		// Minimum execution time: 73_758 nanoseconds.
		Weight::from_ref_time(77_262_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
}
